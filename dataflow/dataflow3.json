{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimittedTestSchemaDrift",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Aggregate1"
				},
				{
					"name": "DerivedColumn1"
				}
			],
			"script": "\nparameters{\n\tcolName as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tdateFormats: ['dd/MM/yyyy']) ~> source1\nDerivedColumn1 aggregate(groupBy({Serial%} = Serial,\n\t\tMeter,\n\t\tDataType),\n\teach(match(name == 'Energy'), concat('', 'Data Value') = round(avg($$))\r\n)) ~> Aggregate1\nsource1 derive(each(match(name=='Energy'), $$+'val' = toDouble($$)),\n\t\tSerial = byName('Serial'),\n\t\tMeter = byPosition(1)\r\n,\n\t\tDataType = case(startsWith(toString(byPosition(7)), 'Data'), toString(byName('Data Type')),toString(byName('DataType')))\r\n\r\n,\n\t\teach(match(name == 'MeterCode'), $$ + 'Test' = toString($$)),\n\t\teach(match(name == 'DataType'), $$ + 'val' = toString($$))) ~> DerivedColumn1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tmapColumn(\n\t\tSerial = {Serial%},\n\t\teach(match(name == 'Data Value'))\n\t)) ~> sink1"
		}
	}
}